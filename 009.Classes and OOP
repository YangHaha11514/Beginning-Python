#类vs实例，类及实例的内建函数
#类属性vs实例属性
#类方法vs实例方法：创建、查看、调用、重构
#特殊方法：构造方法，一般的特殊方法；用特殊方法定制类
#多态、封装、继承



#类的创建：
class ClassName(bases):
    class_suite
#类属性
#类的方法：第一个参数必须为self，类不能直接调用方法，方法必须与实例绑定
#查看类属性：dir(ClassName),ClassName.__dict__ 
#特殊的类方法：C.__name__,C.__doc__,C.__bases__,C.__dict__,C.__module__,C.__class__
    
#实例化：1-初始化类mc=ClassName()，2-检测__init__方法
#构造器方法：__init__(),__new__();结构器：__del__()
class InstCt():
    count=0
    def __init__(self):
        InstCt.count+=1
    def __del__(self):
        InstCt.count-=1
    def howmany(self):
        return(InstCt.count)
#实例属性：__init__()中设置
#查看实例属性:dir();__dict__ 
#特殊的实例方法：I.__class__;I.__dict__

#实例属性vs类属性
#类访问并更新类属性
#实例访问类属性（类属性不可变，类属性为词典等可变对象）

#实例属性只能通过类创建后，自定义实例属性？？？
#实例继承了所有的类属性，相当于copy了一份类属性，类属性与实例属性同名但不完全相同（背后的基础原理？？？）

#类MyClass及其实例mc,无法通过MyClass.foo()调用，可以mc.foo()调用。foo()方法绑定到了实例mc上
#调用非绑定方法：主要应用场景——派生子类，覆盖掉父类的构造方法，先调用父类的构造方法以重用代码
#可否用在覆盖普通的父类方法，先调用该父类方法以重用代码？？？？？

#静态方法和类方法？？？？？？？

